{"version":3,"sources":["utils/useLogs.js","components/Log.js","components/Container.js","components/List.js","components/Today.js","App.js","serviceWorker.js","index.js"],"names":["logsStorageKey","useLogs","_useState","useState","_useState2","Object","slicedToArray","logs","setLogs","useEffect","storageLogs","localStorage","getItem","JSON","parse","saveToLocalStorage","useCallback","newValue","setItem","stringify","addNewLog","newLog","nextLogs","concat","toConsumableArray","updateLog","updatedLogs","map","oldLog","id","_objectSpread","sentimentNegative","sentimentPositive","Log","_ref","defaultLog","value","log","setLog","_useState3","sentiment","_useState4","setSentiment","_useState5","_useState6","isEditing","setIsEditing","react_default","a","createElement","dist_index_esm","as","onSubmit","e","preventDefault","update","Log_objectSpread","date","moment","format","py","mb","forms_dist_index_esm","htmlFor","name","onChange","_ref2","target","justifyContent","type","mr","onClick","sx","bg","fa_index_esm","variant","onDoubleClick","alignItems","fontSize","fromNow","Container","props","assign","p","maxWidth","margin","ascending","descending","Sorter","sort","setSort","pt","sortLogs","b","valueOf","listStyle","m","DayLog","day","isSame","open","setIsOpen","MdExpandLess","MdExpandMore","key","enableSorting","List","_useLogs","byDay","arguments","length","undefined","reduce","acc","push","groupLogsByDay","entries","_ref3","_ref4","dayLogs","Now","now","setNow","interval","setInterval","clearInterval","backgroundImage","backgroundBlendMode","backgroundSize","color","Today","theme","App_objectSpread","presetTheme","colors","text","background","darkest","buttons","primary","secondary","outline","border","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","emotion_theming_browser_esm","core_browser_esm","styles","css","_templateObject","fontFamily","height","children","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.173cca8d.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nconst logsStorageKey = \"my_logs\";\n\nexport default function useLogs() {\n  const [logs, setLogs] = useState([]);\n  useEffect(() => {\n    const storageLogs = localStorage.getItem(logsStorageKey);\n    if (storageLogs) {\n      setLogs(JSON.parse(storageLogs));\n    }\n  }, [setLogs]);\n\n  const saveToLocalStorage = useCallback(newValue => {\n    localStorage.setItem(logsStorageKey, JSON.stringify(newValue));\n  }, []);\n\n  function updateLog(newLog) {\n    const updatedLogs = logs.map(oldLog => {\n      if (oldLog.id === newLog.id) {\n        return {\n          ...oldLog,\n          ...newLog\n        };\n      }\n      return oldLog;\n    });\n    setLogs(updatedLogs);\n    saveToLocalStorage(updatedLogs);\n  }\n  function addNewLog(newLog) {\n    const nextLogs = [...logs, newLog];\n    setLogs(nextLogs);\n    saveToLocalStorage(nextLogs);\n  }\n\n  return {\n    logs,\n    addNewLog,\n    updateLog\n  };\n}\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\nimport { Flex, Card, Box, Button, Text } from \"rebass\";\nimport { Label, Textarea } from \"@rebass/forms\";\n\nconst sentimentNegative = \"negative\";\nconst sentimentPositive = \"positive\";\n\nexport default function Log({ addNewLog, defaultLog, updateLog }) {\n  const [log, setLog] = useState(defaultLog && defaultLog.value);\n  const [sentiment, setSentiment] = useState(\n    defaultLog ? defaultLog.sentiment : null\n  );\n  const [isEditing, setIsEditing] = useState(!log);\n  const toggleEditing = () => setIsEditing(!isEditing);\n  const cancelEditing = () => setIsEditing(false);\n  function saveLog(e) {\n    e.preventDefault();\n\n    if (!defaultLog) {\n      const date = moment();\n      const id = date.format(\"dddd MMMM Do YYYY h:mm:ss a\");\n      addNewLog({\n        id,\n        date,\n        value: log,\n        sentiment\n      });\n      setLog(\"\");\n    } else {\n      const update = {\n        ...defaultLog,\n        value: log,\n        sentiment\n      };\n      updateLog(update);\n      setIsEditing(false);\n    }\n  }\n  function onLogChange({ target }) {\n    setLog(target.value);\n  }\n  if (isEditing) {\n    return (\n      <Box as='form' onSubmit={saveLog} py={[2, 3]}>\n        <Box mb={2}>\n          <Label htmlFor='entry'>What occurred?</Label>\n          <Textarea\n            id='entry'\n            name='entry'\n            onChange={onLogChange}\n            value={log}\n          />\n        </Box>\n        <Flex justifyContent='flex-end'>\n          <Button\n            type='button'\n            mr={1}\n            onClick={() => setSentiment(sentimentNegative)}\n            sx={{ bg: sentiment === sentimentNegative && \"tomato\" }}\n          >\n            <FaThumbsDown />\n          </Button>\n          <Button\n            type='button'\n            mr={1}\n            onClick={() => setSentiment(sentimentPositive)}\n            sx={{ bg: sentiment === sentimentPositive && \"limegreen\" }}\n          >\n            <FaThumbsUp />\n          </Button>\n          {!!defaultLog && (\n            <Button\n              type='button'\n              variant='secondary'\n              onClick={cancelEditing}\n              mr={1}\n            >\n              cancel\n            </Button>\n          )}\n          <Button type='submit' variant='primary'>\n            save\n          </Button>\n        </Flex>\n      </Box>\n    );\n  }\n\n  return (\n    <Card onDoubleClick={toggleEditing} sx={{ bg: \"darkest\", mb: 3 }}>\n      <Text>{log}</Text>\n      <Flex justifyContent='space-between' alignItems='center'>\n        <Box sx={{ fontSize: 1, py: 2 }}>\n          <Text>{moment(defaultLog.date).format(\"h:mm:ss a\")}</Text>\n          <Text>{moment(defaultLog.date).fromNow()}</Text>\n        </Box>\n        {!!sentiment && (\n          <Box mr={2}>\n            {sentiment === sentimentNegative ? (\n              <FaThumbsDown />\n            ) : (\n              <FaThumbsUp />\n            )}\n          </Box>\n        )}\n      </Flex>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Box } from \"rebass\";\n\nexport default function Container(props) {\n  return (\n    <Box\n      sx={{\n        p: 3,\n        maxWidth: 600,\n        margin: \"auto\"\n      }}\n      {...props}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport moment from \"moment\";\nimport useLogs from \"utils/useLogs\";\nimport Log from \"components/Log\";\nimport { Box, Flex, Heading, Button } from \"rebass\";\nimport Container from \"components/Container\";\nimport { Label, Select } from \"@rebass/forms\";\n\nconst ascending = \"ASC\";\nconst descending = \"DEC\";\n\nfunction Sorter({ sort, setSort }) {\n  return (\n    <Box pt={[2, 4]}>\n      <Label htmlFor='sorting' mb={1}>\n        Logs sorting\n      </Label>\n      <Select\n        id='sorting'\n        name='sorting'\n        value={sort}\n        onChange={e => {\n          setSort(e.target.value);\n        }}\n      >\n        <option value={ascending}>ascending</option>\n        <option value={descending}>descending</option>\n      </Select>\n    </Box>\n  );\n}\n\nfunction groupLogsByDay(logs = []) {\n  return logs.reduce((acc, log) => {\n    const day = moment(log.date).format(\"YYYY-MM-DD\");\n\n    if (acc[day]) {\n      acc[day].push(log);\n    } else {\n      acc[day] = [log];\n    }\n    return acc;\n  }, {});\n}\n\nfunction sortLogs(logs, sort) {\n  return logs.sort((a, b) => {\n    if (sort === ascending) {\n      return moment(a.date).valueOf() - moment(b.date).valueOf();\n    }\n    return moment(b.date).valueOf() - moment(a.date).valueOf();\n  });\n}\n\nconst listStyle = {\n  listStyle: \"none\",\n  p: 0,\n  m: 0\n};\n\nfunction DayLog({ day, logs, sort, updateLog }) {\n  const [open, setIsOpen] = useState(moment(day).isSame(moment(), \"day\"));\n  return (\n    <Box as='li' sx={{ mb: 1 }}>\n      <Flex justifyContent='space-between' sx={{ mb: 2 }}>\n        <Heading>{moment(day).format(\"dddd\")}</Heading>\n\n        <Button variant='outline' onClick={() => setIsOpen(!open)}>\n          <Box\n            as={open ? MdExpandLess : MdExpandMore}\n            sx={{ fontSize: [3, 4] }}\n          />\n        </Button>\n      </Flex>\n      {open && (\n        <Box as='ul' sx={listStyle}>\n          {sortLogs(logs, sort).map(log => (\n            <Box as='li' key={log.id}>\n              <Log defaultLog={log} updateLog={updateLog} />\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nconst enableSorting = false;\n\nexport default function List() {\n  const { logs, addNewLog, updateLog } = useLogs();\n  const [sort, setSort] = useState(descending);\n  const sortedLogs = sortLogs(logs);\n\n  const byDay = groupLogsByDay(sortedLogs);\n\n  return (\n    <Container>\n      <Box as='ul' sx={listStyle}>\n        <Box as='li'>\n          <Log addNewLog={addNewLog} updateLog={updateLog} />\n        </Box>\n\n        {Object.entries(byDay).map(([day, dayLogs]) => (\n          <DayLog key={day} updateLog={updateLog} logs={dayLogs} day={day} />\n        ))}\n      </Box>\n      {enableSorting && <Sorter sort={sort} setSort={setSort} />}\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Container from \"components/Container\";\nimport { Heading, Box } from \"rebass\";\n\nfunction Now() {\n  const [now, setNow] = useState(moment());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(moment());\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [setNow]);\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          py: [3, 6],\n          bg: \"bg\",\n          backgroundImage:\n            \"url(https://images.unsplash.com/photo-1552484586-1a51df66315c?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=768&ixid=eyJhcHBfaWQiOjF9&ixlib=rb-1.2.1&q=80&w=1024)\",\n          backgroundBlendMode: \"multiply\",\n          backgroundSize: \"cover\"\n        }}\n      >\n        <Container>\n          <Heading\n            as='h1'\n            sx={{\n              bg: \"darkest\",\n              color: \"white\",\n              // display: \"inline-block\",\n              fontSize: [3, 4, 5],\n              p: 1\n            }}\n          >\n            {now.format(\"MMMM Do YYYY, h:mm:ss a\")}\n          </Heading>\n        </Container>\n      </Box>\n    </Box>\n  );\n}\n\nexport default function Today() {\n  return (\n    <div>\n      <Now />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport List from \"components/List\";\nimport Today from \"components/Today\";\nimport { Global, css } from \"@emotion/core\";\nimport { Box } from \"rebass\";\nimport presetTheme from \"@rebass/preset\";\n\nconst theme = {\n  ...presetTheme,\n  colors: {\n    ...presetTheme.colors,\n    text: presetTheme.colors.background,\n    background: \"hsl(199, 47%, 20%)\",\n    darkest: \"hsla(199, 47%, 10%, .7)\"\n  },\n  buttons: {\n    primary: {\n      color: \"white\",\n      bg: presetTheme.colors.primary\n    },\n    secondary: {\n      color: \"white\",\n      bg: presetTheme.colors.secondary\n    },\n    outline: {\n      color: \"tomato\",\n      background: \"none\",\n      border: `2px solid ${presetTheme.colors.primary}`\n    }\n  }\n};\n\nexport default props => (\n  <ThemeProvider theme={theme}>\n    <Global\n      styles={css`\n        html {\n          background-color: ${theme.colors.background};\n        }\n        html,\n        body {\n          margin: 0;\n          padding: 0;\n        }\n      `}\n    />\n    <Box\n      sx={{\n        fontFamily: \"body\",\n        color: \"text\",\n        height: \"inherit\"\n      }}\n    >\n      <Today />\n      <List />\n      {props.children}\n    </Box>\n  </ThemeProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport * as serviceWorker from \"serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}